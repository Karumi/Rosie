/*
 * Copyright (C) 2015 Karumi.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


buildscript {
  repositories {
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
  }
}


apply plugin: 'com.android.application'

private Properties loadMarvelProperties() {
  Properties props = new Properties()
  props.load(new FileInputStream("./sample/marvel.properties"))
  props
}

private checkMarvelProperties() {
  new File("./sample/marvel.properties").exists()
}

def getPublicMarvelKey() {
  if (checkMarvelProperties()) {
    Properties props = loadMarvelProperties()
    return props['MARVEL_PUBLIC_KEY']
  }
  "null"
}

def getPrivateMarvelKey() {
  if (checkMarvelProperties()) {
    Properties props = loadMarvelProperties()
    return props['MARVEL_PRIVATE_KEY']
  }
  "null"
}

def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

android {
  compileSdkVersion projectCompileSdkVersion
  buildToolsVersion projectBuildTools

  dexOptions {
    preDexLibraries = preDexEnabled
  }

  defaultConfig {
    applicationId "com.karumi.rosie.sample"
    minSdkVersion projectMinSdkVersion
    targetSdkVersion projectTargetSdkVersion
    versionCode 1
    versionName "1.0"
    buildConfigField "String", "MARVEL_PUBLIC_KEY", getPublicMarvelKey()
    buildConfigField "String", "MARVEL_PRIVATE_KEY", getPrivateMarvelKey()
    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation 'com.android.support:appcompat-v7:23.4.0'
  implementation 'com.android.support:support-v13:23.4.0'
  implementation 'com.android.support:design:23.4.0'
  implementation 'com.squareup.picasso:picasso:2.5.2'
  implementation 'com.karumi:dividers:1.0.3'
  implementation 'com.victor:lib:1.0.1' // https://github.com/yankai-victor/Loading
  implementation 'com.karumi:marvelapiclient:0.0.4'
  implementation 'com.github.pedrovgs:renderers:3.0.0'
  annotationProcessor 'com.jakewharton:butterknife:7.0.1'
  implementation 'com.jakewharton:butterknife:7.0.1'
  compileOnly 'com.squareup.dagger:dagger-compiler:1.2.2'
  annotationProcessor 'com.squareup.dagger:dagger-compiler:1.2.2'
  implementation project(':rosie')

  androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
  androidTestImplementation('com.google.dexmaker:dexmaker-mockito:1.2') {
    exclude group: 'org.hamcrest', module: 'hamcrest-core'
  }
  androidTestImplementation 'com.android.support.test:runner:0.4.1'
  androidTestImplementation 'com.android.support.test:rules:0.4.1'
  androidTestImplementation 'org.mockito:mockito-core:1.10.19'
  androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.1') {
    exclude group: 'javax.inject', module: 'javax.inject'
    exclude group: 'com.squareup', module: 'javawriter'
  }
  androidTestImplementation('com.android.support.test.espresso:espresso-contrib:2.2.1') {
    exclude module: 'support-annotations'
    exclude module: 'recyclerview-v7'
    exclude module: 'support-v4'
  }
  androidTestImplementation('com.android.support.test.espresso:espresso-intents:2.2.1')
}

configurations.all {
  resolutionStrategy.force 'com.android.support:support-annotations:23.4.0'
}

